Pattern: Шаблонный метод (Template method)
=================================================================================================================
Цель:

Определение основы класса и создание возможности подклассам переопределять его части.

=================================================================================================================
Для чего используется:

Определяет основу класса и позволяет подклассам переопределять некоторые его части не изменяя его
в целом.

Паттерн Шаблонный метод предлагает разбить алгоритм на последовательность шагов, описать эти шаги в отдельных
методах и вызывать их в одном шаблонном методе друг за другом. Это позволит подклассам переопределять некоторые
шаги алгоритма, оставляя без изменений его структуру и остальные шаги, которые для этого подкласса не так важны.

=================================================================================================================
Пример использования:

- однократное использование различных частей класса, оставляя реализацию изменяющегося поведения
  на усмотрение подклассов;
- вычленение и локализация общего для всех подклассов поведения в родительском;
- управление расширениями;

=================================================================================================================

Аналогия из жизни:

Строители используют подход, похожий на шаблонный метод при строительстве типовых домов. У них есть основной
архитектурный проект, в котором расписаны шаги строительства: заливка фундамента, постройка стен,
перекрытие крыши, установка окон и так далее.
Но, несмотря на стандартизацию каждого этапа, строители могут вносить небольшие изменения на любом
из этапов, чтобы сделать дом чуточку непохожим на другие.

=================================================================================================================

Применимость

 - Когда подклассы должны расширять базовый алгоритм, не меняя его структуры.
    Шаблонный метод позволяет подклассам расширять определённые шаги алгоритма через наследование, не
    меняя при этом структуру алгоритмов, объявленную в базовом классе.

- Когда у вас есть несколько классов, делающих одно и то же с незначительными отличиями. Если вы
  редактируете один класс, то приходится вносить такие же правки и в остальные классы.
    Паттерн шаблонный метод предлагает создать для похожих классов общий суперкласс и оформить в нём
    главный алгоритм в виде шагов. Отличающиеся шаги можно переопределить в подклассах.
    Это позволит убрать дублирование кода в нескольких классах с похожим поведением, но отличающихся в
    деталях.

=================================================================================================================
Шаги реализации

1. Изучите алгоритм и подумайте, можно ли его разбить на шаги. Прикиньте, какие шаги будут стандартными для
   всех вариаций алгоритма, а какие — изменяющимися.

2. Создайте абстрактный базовый класс. Определите в нём шаблонный метод. Этот метод должен состоять из
   вызовов шагов алгоритма. Имеет смысл сделать шаблонный метод финальным, чтобы подклассы не могли
   переопределить его (если ваш язык программирования это позволяет).

3. Добавьте в абстрактный класс методы для каждого из шагов алгоритма. Вы можете сделать эти методы
   абстрактными или добавить какую-то реализацию по умолчанию. В первом случае все подклассы должны
   будут реализовать эти методы, а во втором — только если реализация шага в подклассе отличается от
   стандартной версии.

4. Подумайте о введении в алгоритм хуков. Чаще всего, хуки располагают между основными шагами алгоритма,
   а также до и после всех шагов.

5. Создайте конкретные классы, унаследовав их от абстрактного класса. Реализуйте в них все недостающие
   шаги и хуки.

=================================================================================================================
Преимущества
- Облегчает повторное использование кода.

недостатки
- Вы жёстко ограничены скелетом существующего алгоритма.
- Вы можете нарушить принцип подстановки Барбары Лисков, изменяя базовое поведение одного из шагов алгоритма через подкласс.
- С ростом количества шагов шаблонный метод становится слишком сложно поддерживать.

=================================================================================================================

Отношения с другими паттернами

 Фабричный метод можно рассматривать как частный случай Шаблонного метода. Кроме того, Фабричный метод
 нередко бывает частью большого класса с Шаблонными методами.

 Шаблонный метод использует наследование, чтобы расширять части алгоритма. Стратегия использует делегирование,
 чтобы изменять выполняемые алгоритмы на лету. Шаблонный метод работает на уровне классов. Стратегия позволяет
 менять логику отдельных объектов.

=================================================================================================================
